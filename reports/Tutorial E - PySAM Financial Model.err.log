Traceback (most recent call last):
  File "C:\ProgramData\anaconda3\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\ProgramData\anaconda3\Lib\site-packages\nbclient\client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\ProgramData\anaconda3\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\ProgramData\anaconda3\Lib\asyncio\base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\ProgramData\anaconda3\Lib\site-packages\nbclient\client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "C:\ProgramData\anaconda3\Lib\site-packages\nbclient\client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\ProgramData\anaconda3\Lib\site-packages\nbclient\client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import json
import PySAM.Singleowner as so # import the Single Owner module from PySAM
import PySAM.Cashloan as co #Residential/Commercial BTM financial, covered in next section

# create a new instance of the Singleowner module
so_model = so.new()

#Setup model in SAM, export JSON files with inputs
#For more information on PySAM input json's, see https://nrel-pysam.readthedocs.io/en/main/getting-started.html

#Alternatively, start with default inputs to financial model (may not be accurate for your case)

so_model = so.default("FlatPlatePVSingleOwner")


# get the inputs from the JSON file
with open( 'Tutorial_E_data/SO_example_singleowner.json', 'r') as f:
        so_inputs = json.load( f )

# iterate through the input key-value pairs and set the module inputs
for k, v in so_inputs.items():
    if k != 'number_inputs':
        so_model.value(k, v)
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [1;32mIn[4], line 2[0m
[0;32m      1[0m [38;5;28;01mimport[39;00m [38;5;21;01mjson[39;00m
[1;32m----> 2[0m [38;5;28;01mimport[39;00m [38;5;21;01mPySAM[39;00m[38;5;21;01m.[39;00m[38;5;21;01mSingleowner[39;00m [38;5;28;01mas[39;00m [38;5;21;01mso[39;00m [38;5;66;03m# import the Single Owner module from PySAM[39;00m
[0;32m      3[0m [38;5;28;01mimport[39;00m [38;5;21;01mPySAM[39;00m[38;5;21;01m.[39;00m[38;5;21;01mCashloan[39;00m [38;5;28;01mas[39;00m [38;5;21;01mco[39;00m [38;5;66;03m#Residential/Commercial BTM financial, covered in next section[39;00m
[0;32m      5[0m [38;5;66;03m# create a new instance of the Singleowner module[39;00m

[1;31mModuleNotFoundError[0m: No module named 'PySAM'

